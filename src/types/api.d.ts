/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users (paginated) — Admin only */
        get: operations["UserController_getAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter users with pagination — Admin only */
        get: operations["UserController_filterUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID — Admin only */
        get: operations["UserController_getUserById"];
        /** Update user by ID — Admin only */
        put: operations["UserController_updateUser"];
        post?: never;
        /** Delete user by ID — Admin only */
        delete: operations["UserController_deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login with email and password */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/image-generation/text-to-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate an image from a text prompt */
        post: operations["ImageGenerationModelController_textToImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/character-workflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a character and generate its image using AI */
        post: operations["CharacterWorkflowController_createCharacter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/audio-model/sync-voices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AudioModelController_syncAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/audio-model/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter and paginate available voices
         * @description Retrieves available voices with pagination, text search,
         *             and optional filters for accent, age, and gender.
         */
        get: operations["AudioModelController_filterVoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/character/characterById/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a character by ID
         * @description Fetches a full character document by its unique ID.
         */
        get: operations["CharacterController_getCharacterById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/character/getUserCharacters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all characters of a user
         * @description Fetches all characters created by a specific user ID, returning full documents.
         */
        get: operations["CharacterController_getCharactersByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/character/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete character by ID
         * @description Deletes a character from the database by its unique ID.
         */
        delete: operations["CharacterController_deleteCharacter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateUserDto: {
            /**
             * @description Updated full name of the user
             * @example John Doe Updated
             */
            fullName?: string;
            /**
             * @description Updated email address of the user
             * @example john_updated@example.com
             */
            email?: string;
            /**
             * @description New password for the user (optional)
             * @example newstrongpassword123
             */
            password?: string;
            /**
             * @description Updated gender (optional)
             * @example female
             * @enum {string}
             */
            gender?: "male" | "female" | "other";
            /**
             * @description Updated user role (optional)
             * @example admin
             * @enum {string}
             */
            role?: "admin" | "user";
            /**
             * @description Updated account status (optional)
             * @example suspended
             * @enum {string}
             */
            status?: "active" | "inactive" | "suspended";
            /**
             * @description Updated profile picture URL (optional)
             * @example https://example.com/new-profile.jpg
             */
            profilePic?: string;
        };
        CreateUserDto: {
            /**
             * @description Full name of the user
             * @example John Doe
             */
            fullName: string;
            /**
             * @description Email address of the user (must be unique)
             * @example john@example.com
             */
            email: string;
            /**
             * @description User password (will be hashed before saving)
             * @example strongpassword123
             */
            password: string;
            /**
             * @description Gender of the user
             * @example male
             * @enum {string}
             */
            gender: "male" | "female" | "other";
            /**
             * @description User role in the system
             * @example user
             * @enum {string}
             */
            role: "admin" | "user";
            /**
             * @description Account status (optional, defaults to active)
             * @example active
             * @enum {string}
             */
            status?: "active" | "inactive" | "suspended";
            /**
             * @description Profile picture URL (optional)
             * @example https://example.com/profile.jpg
             */
            profilePic?: string;
        };
        LoginDto: {
            /** @example user@example.com */
            email: string;
            /** @example password123 */
            password: string;
        };
        TextToImageDto: {
            /** @example A futuristic robot in Tokyo at night */
            prompt: string;
            /**
             * @default 1
             * @example 1
             */
            num_images: number;
            /**
             * @default png
             * @example png
             * @enum {string}
             */
            output_format: "jpeg" | "png" | "webp";
            /**
             * @default 9:16
             * @example 9:16
             */
            aspect_ratio: string;
        };
        AppearanceDto: {
            hair_color: string;
            hair_style: string;
            eye_color: string;
            skin_tone: string;
            outfit: string;
            accessories: string[];
        };
        CreateCharacterDto: {
            name: string;
            /** @enum {string} */
            art_style: "anime" | "cartoon" | "realistic" | "fantasy" | "sci-fi" | "3D";
            /** @enum {string} */
            gender: "male" | "female";
            /** @enum {string} */
            age_group: "child" | "teen" | "youngAdult" | "adult" | "elderly";
            personality_traits: ("Heroic" | "Funny" | "Mysterious" | "Calm" | "Energetic" | "Wise" | "Brave" | "Shy" | "Confident" | "Quirky" | "Serious" | "Playful")[];
            /** @enum {string} */
            voice_tone?: "cheerful" | "serious" | "mysterious" | "energetic" | "calm" | "dramatic";
            /** @enum {string} */
            voice_accent?: "neutral" | "american" | "british" | "australian";
            appearance: components["schemas"]["AppearanceDto"];
            backstory?: string;
            Image?: string;
            is_premium?: boolean;
            is_sample?: boolean;
            is_template?: boolean;
            /** @description If true, character will have a custom voice and voice_tone/voice_accent become required. */
            createcustomvoice?: boolean;
            /** @description Reference to the Voice document ID */
            characterVoice: string;
            /** @description User who created this character */
            created_by: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UserController_getAllUsers: {
        parameters: {
            query?: {
                limit?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of users returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_filterUsers: {
        parameters: {
            query?: {
                search?: string;
                gender?: "male" | "female" | "other";
                role?: "admin" | "user";
                status?: string;
                limit?: number;
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User details returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ImageGenerationModelController_textToImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextToImageDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CharacterWorkflowController_createCharacter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCharacterDto"];
            };
        };
        responses: {
            /** @description Character created and image generated successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Prompt generation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to save character to database */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Image generation failed */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AudioModelController_syncAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AudioModelController_filterVoices: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                search?: string;
                accent?: string;
                age?: string;
                gender?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Voices fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CharacterController_getCharacterById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Character ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Character fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CharacterController_getCharactersByUser: {
        parameters: {
            query: {
                /** @description User ID */
                userId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Characters fetched successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    CharacterController_deleteCharacter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Character ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Character deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
